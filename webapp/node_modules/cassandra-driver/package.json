{
  "_from": "cassandra-driver",
  "_id": "cassandra-driver@4.6.3",
  "_inBundle": false,
  "_integrity": "sha512-npW670TXjTHrdb15LUFN01wssb9vvz6SuNYcppesoKcUXx3Q29nXVhRtnvsnkG0BaSnDGvCCR4udrzYLsbh+sg==",
  "_location": "/cassandra-driver",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cassandra-driver",
    "fetchSpec": "latest",
    "name": "cassandra-driver",
    "raw": "cassandra-driver",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cassandra-driver/-/cassandra-driver-4.6.3.tgz",
  "_shasum": "134cd797ad11c8a51da153db3aa5917589e17088",
  "_spec": "cassandra-driver",
  "_where": "/mnt/c/Users/halex/Documents/ULB/VDE/Voisin-d-energie-ULB/webapp",
  "author": {
    "name": "DataStax"
  },
  "bugs": {
    "url": "https://groups.google.com/a/lists.datastax.com/forum/#!forum/nodejs-driver-user"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/long": "^4.0.0",
    "@types/node": ">=8",
    "adm-zip": "^0.5.3",
    "long": "^2.2.0"
  },
  "deprecated": false,
  "description": "DataStax Node.js Driver for Apache Cassandra",
  "devDependencies": {
    "chai": "4.2.0",
    "mocha": "~7.1.1",
    "proxyquire": "~2.1.3",
    "sinon": "~7.5.0",
    "temp": ">= 0.8.3"
  },
  "engines": {
    "node": ">=8"
  },
  "homepage": "https://github.com/datastax/nodejs-driver#readme",
  "keywords": [
    "cassandra",
    "connection",
    "cql",
    "cql3",
    "database",
    "datastax",
    "driver",
    "dse",
    "graph",
    "graphdb",
    "gremlin",
    "nosql"
  ],
  "license": "Apache-2.0",
  "name": "cassandra-driver",
  "optionalDependencies": {},
  "readme": "# DataStax Node.js Driver for Apache CassandraÂ®\n\nA modern, [feature-rich](#features) and highly tunable Node.js client library for Apache Cassandra and [DSE][dse] using\nexclusively Cassandra's binary protocol and Cassandra Query Language.\n\n## Installation\n\n```bash\n$ npm install cassandra-driver\n```\n\n[![Build Status](https://api.travis-ci.com/datastax/nodejs-driver.svg?branch=master)](https://travis-ci.org/datastax/nodejs-driver)\n[![Build status](https://ci.appveyor.com/api/projects/status/m21t2tfdpmkjex1l/branch/master?svg=true)](https://ci.appveyor.com/project/datastax/nodejs-driver/branch/master)\n\n\n## Features\n\n- Simple, Prepared, and [Batch][batch] statements\n- Asynchronous IO, parallel execution, request pipelining\n- [Connection pooling][pooling]\n- Auto node discovery\n- Automatic reconnection\n- Configurable [load balancing][load-balancing] and [retry policies][retry]\n- Works with any cluster size\n- Built-in [object mapper][doc-mapper]\n- Both [promise and callback-based API][doc-promise-callback]\n- [Row streaming and pipes](#row-streaming-and-pipes)\n- Built-in TypeScript support\n\n## Documentation\n\n- [Documentation index][doc-index]\n- [CQL types to JavaScript types][doc-datatypes]\n- [API docs][doc-api]\n- [FAQ][faq]\n\n## Getting Help\n\nYou can use the [project mailing list][mailinglist] or create a ticket on the [Jira issue tracker][jira].\n\n## Basic usage\n\n```javascript\nconst cassandra = require('cassandra-driver');\n\nconst client = new cassandra.Client({\n  contactPoints: ['h1', 'h2'],\n  localDataCenter: 'datacenter1',\n  keyspace: 'ks1'\n});\n\nconst query = 'SELECT name, email FROM users WHERE key = ?';\n\nclient.execute(query, [ 'someone' ])\n  .then(result => console.log('User with email %s', result.rows[0].email));\n```\n\nThe driver supports both [promises and callbacks][doc-promise-callback] for the asynchronous methods,\nyou can choose the approach that suits your needs.\n\nNote that in order to have concise code examples in this documentation, we will use the promise-based API of the \ndriver along with the `await` keyword.\n\nIf you are using [DataStax Astra][astra] you can configure your client by setting the secure bundle and the\n user credentials:\n\n```javascript\nconst client = new cassandra.Client({\n  cloud: { secureConnectBundle: 'path/to/secure-connect-DATABASE_NAME.zip' },\n  credentials: { username: 'user_name', password: 'p@ssword1' }\n});\n```\n\n### Prepare your queries\n\nUsing prepared statements provides multiple benefits.\n\nPrepared statements are parsed and prepared on the Cassandra nodes and are ready for future execution.\nAlso, when preparing, the driver retrieves information about the parameter types which\n **allows an accurate mapping between a JavaScript type and a Cassandra type**.\n\nThe driver will prepare the query once on each host and execute the statement with the bound parameters.\n\n```javascript\n// Use query markers (?) and parameters\nconst query = 'UPDATE users SET birth = ? WHERE key=?'; \nconst params = [ new Date(1942, 10, 1), 'jimi-hendrix' ];\n\n// Set the prepare flag in the query options\nawait client.execute(query, params, { prepare: true });\nconsole.log('Row updated on the cluster');\n```\n\n### Row streaming and pipes\n\nWhen using `#eachRow()` and `#stream()` methods, the driver parses each row as soon as it is received,\n yielding rows without buffering them.\n\n```javascript\n// Reducing a large result\nclient.eachRow(\n  'SELECT time, val FROM temperature WHERE station_id=',\n  ['abc'],\n  (n, row) => {\n    // The callback will be invoked per each row as soon as they are received\n    minTemperature = Math.min(row.val, minTemperature); \n  },\n  err => { \n    // This function will be invoked when all rows where consumed or an error was encountered  \n  }\n);\n```\n\nThe `#stream()` method works in the same way but instead of callback it returns a [Readable Streams2][streams2] object\n in `objectMode` that emits instances of `Row`.\n\nIt can be **piped** downstream and provides automatic pause/resume logic (it buffers when not read).\n\n```javascript\nclient.stream('SELECT time, val FROM temperature WHERE station_id=', [ 'abc' ])\n  .on('readable', function () {\n    // 'readable' is emitted as soon a row is received and parsed\n    let row;\n    while (row = this.read()) {\n      console.log('time %s and value %s', row.time, row.val);\n    }\n  })\n  .on('end', function () {\n    // Stream ended, there aren't any more rows\n  })\n  .on('error', function (err) {\n    // Something went wrong: err is a response error from Cassandra\n  });\n```\n\n### User defined types\n\n[User defined types (UDT)][cql-udt] are represented as JavaScript objects.\n\nFor example:\nConsider the following UDT and table\n\n```cql\nCREATE TYPE address (\n  street text,\n  city text,\n  state text,\n  zip int,\n  phones set<text>\n);\nCREATE TABLE users (\n  name text PRIMARY KEY,\n  email text,\n  address frozen<address>\n);\n```\n\nYou can retrieve the user address details as a regular JavaScript object.\n\n```javascript\nconst query = 'SELECT name, address FROM users WHERE key = ?';\nconst result = await client.execute(query, [ key ], { prepare: true });\nconst row = result.first();\nconst address = row.address;\nconsole.log('User lives in %s, %s - %s', address.street, address.city, address.state);\n```\n\nRead more information  about using [UDTs with the Node.js Driver][doc-udt].\n\n### Paging\n\nAll driver methods use a default `fetchSize` of 5000 rows, retrieving only first page of results up to a\nmaximum of 5000 rows to shield an application against accidentally retrieving large result sets in a single response.\n\n`stream()` method automatically fetches the following page once the current one was read. You can also use `eachRow()` \nmethod to retrieve the following pages by using `autoPage` flag. See [paging documentation for more \ninformation][doc-paging].\n\n### Batch multiple statements\n\nYou can execute multiple statements in a batch to update/insert several rows atomically even in different column families.\n\n```javascript\nconst queries = [\n  {\n    query: 'UPDATE user_profiles SET email=? WHERE key=?',\n    params: [ emailAddress, 'hendrix' ]\n  }, {\n    query: 'INSERT INTO user_track (key, text, date) VALUES (?, ?, ?)',\n    params: [ 'hendrix', 'Changed email', new Date() ]\n  }\n];\n\nawait client.batch(queries, { prepare: true });\nconsole.log('Data updated on cluster');\n```\n\n## Object Mapper\n\nThe driver provides a built-in [object mapper][doc-mapper] that lets you interact with your data like you \nwould interact with a set of documents.\n\nRetrieving objects from the database:\n\n```javascript\nconst videos = await videoMapper.find({ userId });\nfor (let video of videos) {\n  console.log(video.name);\n}\n```\n\nUpdating an object from the database:\n\n```javascript\nawait videoMapper.update({ id, userId, name, addedDate, description });\n```\n\nYou can read more information about [getting started with the Mapper in our\ndocumentation][doc-mapper-start].\n\n----\n\n## Data types\n\nThere are few data types defined in the ECMAScript specification, this usually represents a problem when you are trying\n to deal with data types that come from other systems in JavaScript.\n\nThe driver supports all the CQL data types in Apache Cassandra (3.0 and below) even for types with no built-in\nJavaScript representation, like decimal, varint and bigint. Check the documentation on working with\n [numerical values][doc-numerical], [uuids][doc-uuid] and [collections][doc-collections].\n\n## Logging\n\nInstances of `Client()` are `EventEmitter` and emit `log` events:\n\n```javascript\nclient.on('log', (level, loggerName, message, furtherInfo) => {\n  console.log(`${level} - ${loggerName}:  ${message}`);\n});\n```\n\nThe `level` being passed to the listener can be `verbose`, `info`, `warning` or `error`. Visit the [logging\ndocumentation][doc-logging] for more information. \n\n## Compatibility\n\n- Apache Cassandra versions 2.1 and above.\n- DataStax Enterprise versions 4.8 and above.\n- Node.js versions 8 and above.\n\nNote: DataStax products do not support big-endian systems.\n\n## Credits\n\nThis driver is based on the original work of [Jorge Bay][jorgebay] on [node-cassandra-cql][old-driver] and adds a series of advanced features that are common across all other [DataStax drivers][drivers] for Apache Cassandra.\n\nThe development effort to provide an up to date, high performance, fully featured Node.js Driver for Apache Cassandra will continue on this project, while [node-cassandra-cql][old-driver] will be discontinued.\n\n## License\n\nÂ© DataStax, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n[cassandra]: https://cassandra.apache.org/\n[doc-api]: https://docs.datastax.com/en/developer/nodejs-driver/latest/api/\n[doc-index]: https://docs.datastax.com/en/developer/nodejs-driver/latest/\n[doc-datatypes]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/datatypes/\n[doc-numerical]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/datatypes/numerical/\n[doc-uuid]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/datatypes/uuids/\n[doc-collections]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/datatypes/collections/\n[doc-udt]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/datatypes/udts/\n[doc-promise-callback]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/promise-callback/\n[doc-mapper]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/mapper/\n[doc-mapper-start]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/mapper/getting-started/\n[doc-logging]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/logging/\n[faq]: https://docs.datastax.com/en/developer/nodejs-driver/latest/faq/\n[load-balancing]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/tuning-policies/#load-balancing-policy\n[retry]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/tuning-policies/#retry-policy\n[pooling]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/connection-pooling/\n[batch]: https://docs.datastax.com/en/developer/nodejs-driver/latest/features/batch/\n[old-driver]: https://github.com/jorgebay/node-cassandra-cql\n[jorgebay]: https://github.com/jorgebay\n[drivers]: https://github.com/datastax\n[mailinglist]: https://groups.google.com/a/lists.datastax.com/forum/#!forum/nodejs-driver-user\n[jira]: https://datastax-oss.atlassian.net/projects/NODEJS/issues\n[streams2]: https://nodejs.org/api/stream.html#stream_class_stream_readable\n[cql-udt]: https://cassandra.apache.org/doc/latest/cql/types.html#udts\n[dse]: https://www.datastax.com/products/datastax-enterprise\n[astra]: https://www.datastax.com/products/datastax-astra",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/datastax/nodejs-driver.git"
  },
  "scripts": {
    "ci_appveyor": "mocha test/unit test/integration/short --recursive -R mocha-appveyor-reporter --exit",
    "ci_jenkins": "mocha test/unit test/integration/short --recursive -R mocha-jenkins-reporter --exit",
    "ci_unit_appveyor": "mocha test/unit --recursive -R mocha-appveyor-reporter --exit",
    "eslint": "eslint lib test",
    "foo": "mocha test/integration/short --recursive -R spec --exit -g 'should subscribe to TOPOLOGY_CHANGE'",
    "server_api": "mocha test/integration/short -g '@SERVER_API' --recursive --exit",
    "test": "mocha test/unit -R spec -t 5000 --recursive"
  },
  "types": "./index.d.ts",
  "version": "4.6.3"
}
